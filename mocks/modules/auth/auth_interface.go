// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	auth "github.com/ahmad20/bri-mini-project/modules/auth"
	mock "github.com/stretchr/testify/mock"
)

// AuthInterface is an autogenerated mock type for the AuthInterface type
type AuthInterface struct {
	mock.Mock
}

type AuthInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthInterface) EXPECT() *AuthInterface_Expecter {
	return &AuthInterface_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: username, role
func (_m *AuthInterface) GenerateToken(username string, role string) (string, error) {
	ret := _m.Called(username, role)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(username, role)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(username, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthInterface_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type AuthInterface_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - username string
//   - role string
func (_e *AuthInterface_Expecter) GenerateToken(username interface{}, role interface{}) *AuthInterface_GenerateToken_Call {
	return &AuthInterface_GenerateToken_Call{Call: _e.mock.On("GenerateToken", username, role)}
}

func (_c *AuthInterface_GenerateToken_Call) Run(run func(username string, role string)) *AuthInterface_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *AuthInterface_GenerateToken_Call) Return(_a0 string, _a1 error) *AuthInterface_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthInterface_GenerateToken_Call) RunAndReturn(run func(string, string) (string, error)) *AuthInterface_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyToken provides a mock function with given fields: tokenString
func (_m *AuthInterface) VerifyToken(tokenString string) (*auth.Claims, error) {
	ret := _m.Called(tokenString)

	var r0 *auth.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*auth.Claims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *auth.Claims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthInterface_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type AuthInterface_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - tokenString string
func (_e *AuthInterface_Expecter) VerifyToken(tokenString interface{}) *AuthInterface_VerifyToken_Call {
	return &AuthInterface_VerifyToken_Call{Call: _e.mock.On("VerifyToken", tokenString)}
}

func (_c *AuthInterface_VerifyToken_Call) Run(run func(tokenString string)) *AuthInterface_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AuthInterface_VerifyToken_Call) Return(_a0 *auth.Claims, _a1 error) *AuthInterface_VerifyToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthInterface_VerifyToken_Call) RunAndReturn(run func(string) (*auth.Claims, error)) *AuthInterface_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAuthInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthInterface creates a new instance of AuthInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthInterface(t mockConstructorTestingTNewAuthInterface) *AuthInterface {
	mock := &AuthInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
