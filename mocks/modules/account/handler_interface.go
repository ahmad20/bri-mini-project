// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// HandlerInterface is an autogenerated mock type for the HandlerInterface type
type HandlerInterface struct {
	mock.Mock
}

type HandlerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerInterface) EXPECT() *HandlerInterface_Expecter {
	return &HandlerInterface_Expecter{mock: &_m.Mock}
}

// AdminDelete provides a mock function with given fields: c
func (_m *HandlerInterface) AdminDelete(c *gin.Context) {
	_m.Called(c)
}

// HandlerInterface_AdminDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminDelete'
type HandlerInterface_AdminDelete_Call struct {
	*mock.Call
}

// AdminDelete is a helper method to define mock.On call
//   - c *gin.Context
func (_e *HandlerInterface_Expecter) AdminDelete(c interface{}) *HandlerInterface_AdminDelete_Call {
	return &HandlerInterface_AdminDelete_Call{Call: _e.mock.On("AdminDelete", c)}
}

func (_c *HandlerInterface_AdminDelete_Call) Run(run func(c *gin.Context)) *HandlerInterface_AdminDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *HandlerInterface_AdminDelete_Call) Return() *HandlerInterface_AdminDelete_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlerInterface_AdminDelete_Call) RunAndReturn(run func(*gin.Context)) *HandlerInterface_AdminDelete_Call {
	_c.Call.Return(run)
	return _c
}

// AdminRegister provides a mock function with given fields: c
func (_m *HandlerInterface) AdminRegister(c *gin.Context) {
	_m.Called(c)
}

// HandlerInterface_AdminRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminRegister'
type HandlerInterface_AdminRegister_Call struct {
	*mock.Call
}

// AdminRegister is a helper method to define mock.On call
//   - c *gin.Context
func (_e *HandlerInterface_Expecter) AdminRegister(c interface{}) *HandlerInterface_AdminRegister_Call {
	return &HandlerInterface_AdminRegister_Call{Call: _e.mock.On("AdminRegister", c)}
}

func (_c *HandlerInterface_AdminRegister_Call) Run(run func(c *gin.Context)) *HandlerInterface_AdminRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *HandlerInterface_AdminRegister_Call) Return() *HandlerInterface_AdminRegister_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlerInterface_AdminRegister_Call) RunAndReturn(run func(*gin.Context)) *HandlerInterface_AdminRegister_Call {
	_c.Call.Return(run)
	return _c
}

// CustomerDelete provides a mock function with given fields: c
func (_m *HandlerInterface) CustomerDelete(c *gin.Context) {
	_m.Called(c)
}

// HandlerInterface_CustomerDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CustomerDelete'
type HandlerInterface_CustomerDelete_Call struct {
	*mock.Call
}

// CustomerDelete is a helper method to define mock.On call
//   - c *gin.Context
func (_e *HandlerInterface_Expecter) CustomerDelete(c interface{}) *HandlerInterface_CustomerDelete_Call {
	return &HandlerInterface_CustomerDelete_Call{Call: _e.mock.On("CustomerDelete", c)}
}

func (_c *HandlerInterface_CustomerDelete_Call) Run(run func(c *gin.Context)) *HandlerInterface_CustomerDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *HandlerInterface_CustomerDelete_Call) Return() *HandlerInterface_CustomerDelete_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlerInterface_CustomerDelete_Call) RunAndReturn(run func(*gin.Context)) *HandlerInterface_CustomerDelete_Call {
	_c.Call.Return(run)
	return _c
}

// CustomerRegister provides a mock function with given fields: c
func (_m *HandlerInterface) CustomerRegister(c *gin.Context) {
	_m.Called(c)
}

// HandlerInterface_CustomerRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CustomerRegister'
type HandlerInterface_CustomerRegister_Call struct {
	*mock.Call
}

// CustomerRegister is a helper method to define mock.On call
//   - c *gin.Context
func (_e *HandlerInterface_Expecter) CustomerRegister(c interface{}) *HandlerInterface_CustomerRegister_Call {
	return &HandlerInterface_CustomerRegister_Call{Call: _e.mock.On("CustomerRegister", c)}
}

func (_c *HandlerInterface_CustomerRegister_Call) Run(run func(c *gin.Context)) *HandlerInterface_CustomerRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *HandlerInterface_CustomerRegister_Call) Return() *HandlerInterface_CustomerRegister_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlerInterface_CustomerRegister_Call) RunAndReturn(run func(*gin.Context)) *HandlerInterface_CustomerRegister_Call {
	_c.Call.Return(run)
	return _c
}

// GetAdminApproval provides a mock function with given fields: c
func (_m *HandlerInterface) GetAdminApproval(c *gin.Context) {
	_m.Called(c)
}

// HandlerInterface_GetAdminApproval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdminApproval'
type HandlerInterface_GetAdminApproval_Call struct {
	*mock.Call
}

// GetAdminApproval is a helper method to define mock.On call
//   - c *gin.Context
func (_e *HandlerInterface_Expecter) GetAdminApproval(c interface{}) *HandlerInterface_GetAdminApproval_Call {
	return &HandlerInterface_GetAdminApproval_Call{Call: _e.mock.On("GetAdminApproval", c)}
}

func (_c *HandlerInterface_GetAdminApproval_Call) Run(run func(c *gin.Context)) *HandlerInterface_GetAdminApproval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *HandlerInterface_GetAdminApproval_Call) Return() *HandlerInterface_GetAdminApproval_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlerInterface_GetAdminApproval_Call) RunAndReturn(run func(*gin.Context)) *HandlerInterface_GetAdminApproval_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAdmin provides a mock function with given fields: c
func (_m *HandlerInterface) GetAllAdmin(c *gin.Context) {
	_m.Called(c)
}

// HandlerInterface_GetAllAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAdmin'
type HandlerInterface_GetAllAdmin_Call struct {
	*mock.Call
}

// GetAllAdmin is a helper method to define mock.On call
//   - c *gin.Context
func (_e *HandlerInterface_Expecter) GetAllAdmin(c interface{}) *HandlerInterface_GetAllAdmin_Call {
	return &HandlerInterface_GetAllAdmin_Call{Call: _e.mock.On("GetAllAdmin", c)}
}

func (_c *HandlerInterface_GetAllAdmin_Call) Run(run func(c *gin.Context)) *HandlerInterface_GetAllAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *HandlerInterface_GetAllAdmin_Call) Return() *HandlerInterface_GetAllAdmin_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlerInterface_GetAllAdmin_Call) RunAndReturn(run func(*gin.Context)) *HandlerInterface_GetAllAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCustomer provides a mock function with given fields: c
func (_m *HandlerInterface) GetAllCustomer(c *gin.Context) {
	_m.Called(c)
}

// HandlerInterface_GetAllCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCustomer'
type HandlerInterface_GetAllCustomer_Call struct {
	*mock.Call
}

// GetAllCustomer is a helper method to define mock.On call
//   - c *gin.Context
func (_e *HandlerInterface_Expecter) GetAllCustomer(c interface{}) *HandlerInterface_GetAllCustomer_Call {
	return &HandlerInterface_GetAllCustomer_Call{Call: _e.mock.On("GetAllCustomer", c)}
}

func (_c *HandlerInterface_GetAllCustomer_Call) Run(run func(c *gin.Context)) *HandlerInterface_GetAllCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *HandlerInterface_GetAllCustomer_Call) Return() *HandlerInterface_GetAllCustomer_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlerInterface_GetAllCustomer_Call) RunAndReturn(run func(*gin.Context)) *HandlerInterface_GetAllCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: c
func (_m *HandlerInterface) Login(c *gin.Context) {
	_m.Called(c)
}

// HandlerInterface_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type HandlerInterface_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - c *gin.Context
func (_e *HandlerInterface_Expecter) Login(c interface{}) *HandlerInterface_Login_Call {
	return &HandlerInterface_Login_Call{Call: _e.mock.On("Login", c)}
}

func (_c *HandlerInterface_Login_Call) Run(run func(c *gin.Context)) *HandlerInterface_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *HandlerInterface_Login_Call) Return() *HandlerInterface_Login_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlerInterface_Login_Call) RunAndReturn(run func(*gin.Context)) *HandlerInterface_Login_Call {
	_c.Call.Return(run)
	return _c
}

// ReadById provides a mock function with given fields: c
func (_m *HandlerInterface) ReadById(c *gin.Context) {
	_m.Called(c)
}

// HandlerInterface_ReadById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadById'
type HandlerInterface_ReadById_Call struct {
	*mock.Call
}

// ReadById is a helper method to define mock.On call
//   - c *gin.Context
func (_e *HandlerInterface_Expecter) ReadById(c interface{}) *HandlerInterface_ReadById_Call {
	return &HandlerInterface_ReadById_Call{Call: _e.mock.On("ReadById", c)}
}

func (_c *HandlerInterface_ReadById_Call) Run(run func(c *gin.Context)) *HandlerInterface_ReadById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *HandlerInterface_ReadById_Call) Return() *HandlerInterface_ReadById_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlerInterface_ReadById_Call) RunAndReturn(run func(*gin.Context)) *HandlerInterface_ReadById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAdminApproval provides a mock function with given fields: c
func (_m *HandlerInterface) UpdateAdminApproval(c *gin.Context) {
	_m.Called(c)
}

// HandlerInterface_UpdateAdminApproval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAdminApproval'
type HandlerInterface_UpdateAdminApproval_Call struct {
	*mock.Call
}

// UpdateAdminApproval is a helper method to define mock.On call
//   - c *gin.Context
func (_e *HandlerInterface_Expecter) UpdateAdminApproval(c interface{}) *HandlerInterface_UpdateAdminApproval_Call {
	return &HandlerInterface_UpdateAdminApproval_Call{Call: _e.mock.On("UpdateAdminApproval", c)}
}

func (_c *HandlerInterface_UpdateAdminApproval_Call) Run(run func(c *gin.Context)) *HandlerInterface_UpdateAdminApproval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *HandlerInterface_UpdateAdminApproval_Call) Return() *HandlerInterface_UpdateAdminApproval_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlerInterface_UpdateAdminApproval_Call) RunAndReturn(run func(*gin.Context)) *HandlerInterface_UpdateAdminApproval_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAdminStatus provides a mock function with given fields: c
func (_m *HandlerInterface) UpdateAdminStatus(c *gin.Context) {
	_m.Called(c)
}

// HandlerInterface_UpdateAdminStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAdminStatus'
type HandlerInterface_UpdateAdminStatus_Call struct {
	*mock.Call
}

// UpdateAdminStatus is a helper method to define mock.On call
//   - c *gin.Context
func (_e *HandlerInterface_Expecter) UpdateAdminStatus(c interface{}) *HandlerInterface_UpdateAdminStatus_Call {
	return &HandlerInterface_UpdateAdminStatus_Call{Call: _e.mock.On("UpdateAdminStatus", c)}
}

func (_c *HandlerInterface_UpdateAdminStatus_Call) Run(run func(c *gin.Context)) *HandlerInterface_UpdateAdminStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *HandlerInterface_UpdateAdminStatus_Call) Return() *HandlerInterface_UpdateAdminStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlerInterface_UpdateAdminStatus_Call) RunAndReturn(run func(*gin.Context)) *HandlerInterface_UpdateAdminStatus_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewHandlerInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewHandlerInterface creates a new instance of HandlerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHandlerInterface(t mockConstructorTestingTNewHandlerInterface) *HandlerInterface {
	mock := &HandlerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
