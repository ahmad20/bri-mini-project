// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/ahmad20/bri-mini-project/entities"
	mock "github.com/stretchr/testify/mock"
)

// UseCaseInterface is an autogenerated mock type for the UseCaseInterface type
type UseCaseInterface struct {
	mock.Mock
}

type UseCaseInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UseCaseInterface) EXPECT() *UseCaseInterface_Expecter {
	return &UseCaseInterface_Expecter{mock: &_m.Mock}
}

// CountList provides a mock function with given fields: _a0
func (_m *UseCaseInterface) CountList(_a0 *entities.Customer) (int64, error) {
	ret := _m.Called(_a0)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Customer) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entities.Customer) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*entities.Customer) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_CountList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountList'
type UseCaseInterface_CountList_Call struct {
	*mock.Call
}

// CountList is a helper method to define mock.On call
//   - _a0 *entities.Customer
func (_e *UseCaseInterface_Expecter) CountList(_a0 interface{}) *UseCaseInterface_CountList_Call {
	return &UseCaseInterface_CountList_Call{Call: _e.mock.On("CountList", _a0)}
}

func (_c *UseCaseInterface_CountList_Call) Run(run func(_a0 *entities.Customer)) *UseCaseInterface_CountList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Customer))
	})
	return _c
}

func (_c *UseCaseInterface_CountList_Call) Return(_a0 int64, _a1 error) *UseCaseInterface_CountList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_CountList_Call) RunAndReturn(run func(*entities.Customer) (int64, error)) *UseCaseInterface_CountList_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0
func (_m *UseCaseInterface) Delete(_a0 *entities.Customer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Customer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCaseInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UseCaseInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 *entities.Customer
func (_e *UseCaseInterface_Expecter) Delete(_a0 interface{}) *UseCaseInterface_Delete_Call {
	return &UseCaseInterface_Delete_Call{Call: _e.mock.On("Delete", _a0)}
}

func (_c *UseCaseInterface_Delete_Call) Run(run func(_a0 *entities.Customer)) *UseCaseInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Customer))
	})
	return _c
}

func (_c *UseCaseInterface_Delete_Call) Return(_a0 error) *UseCaseInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseInterface_Delete_Call) RunAndReturn(run func(*entities.Customer) error) *UseCaseInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *UseCaseInterface) GetAll() ([]*entities.Customer, error) {
	ret := _m.Called()

	var r0 []*entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Customer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type UseCaseInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *UseCaseInterface_Expecter) GetAll() *UseCaseInterface_GetAll_Call {
	return &UseCaseInterface_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *UseCaseInterface_GetAll_Call) Run(run func()) *UseCaseInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseInterface_GetAll_Call) Return(_a0 []*entities.Customer, _a1 error) *UseCaseInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetAll_Call) RunAndReturn(run func() ([]*entities.Customer, error)) *UseCaseInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *UseCaseInterface) GetById(id string) (*entities.Customer, error) {
	ret := _m.Called(id)

	var r0 *entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Customer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Customer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type UseCaseInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id string
func (_e *UseCaseInterface_Expecter) GetById(id interface{}) *UseCaseInterface_GetById_Call {
	return &UseCaseInterface_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *UseCaseInterface_GetById_Call) Run(run func(id string)) *UseCaseInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UseCaseInterface_GetById_Call) Return(_a0 *entities.Customer, _a1 error) *UseCaseInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetById_Call) RunAndReturn(run func(string) (*entities.Customer, error)) *UseCaseInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomersWithConditions provides a mock function with given fields: keyword, page, limit
func (_m *UseCaseInterface) GetCustomersWithConditions(keyword string, page string, limit string) ([]*entities.Customer, error) {
	ret := _m.Called(keyword, page, limit)

	var r0 []*entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]*entities.Customer, error)); ok {
		return rf(keyword, page, limit)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []*entities.Customer); ok {
		r0 = rf(keyword, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(keyword, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetCustomersWithConditions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomersWithConditions'
type UseCaseInterface_GetCustomersWithConditions_Call struct {
	*mock.Call
}

// GetCustomersWithConditions is a helper method to define mock.On call
//   - keyword string
//   - page string
//   - limit string
func (_e *UseCaseInterface_Expecter) GetCustomersWithConditions(keyword interface{}, page interface{}, limit interface{}) *UseCaseInterface_GetCustomersWithConditions_Call {
	return &UseCaseInterface_GetCustomersWithConditions_Call{Call: _e.mock.On("GetCustomersWithConditions", keyword, page, limit)}
}

func (_c *UseCaseInterface_GetCustomersWithConditions_Call) Run(run func(keyword string, page string, limit string)) *UseCaseInterface_GetCustomersWithConditions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UseCaseInterface_GetCustomersWithConditions_Call) Return(_a0 []*entities.Customer, _a1 error) *UseCaseInterface_GetCustomersWithConditions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetCustomersWithConditions_Call) RunAndReturn(run func(string, string, string) ([]*entities.Customer, error)) *UseCaseInterface_GetCustomersWithConditions_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: _a0
func (_m *UseCaseInterface) Register(_a0 *entities.Customer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Customer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCaseInterface_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type UseCaseInterface_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 *entities.Customer
func (_e *UseCaseInterface_Expecter) Register(_a0 interface{}) *UseCaseInterface_Register_Call {
	return &UseCaseInterface_Register_Call{Call: _e.mock.On("Register", _a0)}
}

func (_c *UseCaseInterface_Register_Call) Run(run func(_a0 *entities.Customer)) *UseCaseInterface_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Customer))
	})
	return _c
}

func (_c *UseCaseInterface_Register_Call) Return(_a0 error) *UseCaseInterface_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseInterface_Register_Call) RunAndReturn(run func(*entities.Customer) error) *UseCaseInterface_Register_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUseCaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCaseInterface creates a new instance of UseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCaseInterface(t mockConstructorTestingTNewUseCaseInterface) *UseCaseInterface {
	mock := &UseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
