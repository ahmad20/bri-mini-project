// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/ahmad20/bri-mini-project/entities"
	mock "github.com/stretchr/testify/mock"
)

// AccountRepositoryInterface is an autogenerated mock type for the AccountRepositoryInterface type
type AccountRepositoryInterface struct {
	mock.Mock
}

type AccountRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountRepositoryInterface) EXPECT() *AccountRepositoryInterface_Expecter {
	return &AccountRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: account
func (_m *AccountRepositoryInterface) Create(account *entities.Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AccountRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - account *entities.Account
func (_e *AccountRepositoryInterface_Expecter) Create(account interface{}) *AccountRepositoryInterface_Create_Call {
	return &AccountRepositoryInterface_Create_Call{Call: _e.mock.On("Create", account)}
}

func (_c *AccountRepositoryInterface_Create_Call) Run(run func(account *entities.Account)) *AccountRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Account))
	})
	return _c
}

func (_c *AccountRepositoryInterface_Create_Call) Return(_a0 error) *AccountRepositoryInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepositoryInterface_Create_Call) RunAndReturn(run func(*entities.Account) error) *AccountRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: account
func (_m *AccountRepositoryInterface) Delete(account *entities.Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepositoryInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AccountRepositoryInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - account *entities.Account
func (_e *AccountRepositoryInterface_Expecter) Delete(account interface{}) *AccountRepositoryInterface_Delete_Call {
	return &AccountRepositoryInterface_Delete_Call{Call: _e.mock.On("Delete", account)}
}

func (_c *AccountRepositoryInterface_Delete_Call) Run(run func(account *entities.Account)) *AccountRepositoryInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Account))
	})
	return _c
}

func (_c *AccountRepositoryInterface_Delete_Call) Return(_a0 error) *AccountRepositoryInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepositoryInterface_Delete_Call) RunAndReturn(run func(*entities.Account) error) *AccountRepositoryInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAdminsWithConditions provides a mock function with given fields: keyword, page, limit
func (_m *AccountRepositoryInterface) GetAdminsWithConditions(keyword string, page string, limit string) ([]*entities.Account, error) {
	ret := _m.Called(keyword, page, limit)

	var r0 []*entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]*entities.Account, error)); ok {
		return rf(keyword, page, limit)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []*entities.Account); ok {
		r0 = rf(keyword, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(keyword, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepositoryInterface_GetAdminsWithConditions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdminsWithConditions'
type AccountRepositoryInterface_GetAdminsWithConditions_Call struct {
	*mock.Call
}

// GetAdminsWithConditions is a helper method to define mock.On call
//   - keyword string
//   - page string
//   - limit string
func (_e *AccountRepositoryInterface_Expecter) GetAdminsWithConditions(keyword interface{}, page interface{}, limit interface{}) *AccountRepositoryInterface_GetAdminsWithConditions_Call {
	return &AccountRepositoryInterface_GetAdminsWithConditions_Call{Call: _e.mock.On("GetAdminsWithConditions", keyword, page, limit)}
}

func (_c *AccountRepositoryInterface_GetAdminsWithConditions_Call) Run(run func(keyword string, page string, limit string)) *AccountRepositoryInterface_GetAdminsWithConditions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AccountRepositoryInterface_GetAdminsWithConditions_Call) Return(_a0 []*entities.Account, _a1 error) *AccountRepositoryInterface_GetAdminsWithConditions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepositoryInterface_GetAdminsWithConditions_Call) RunAndReturn(run func(string, string, string) ([]*entities.Account, error)) *AccountRepositoryInterface_GetAdminsWithConditions_Call {
	_c.Call.Return(run)
	return _c
}

// GetWaitingApproval provides a mock function with given fields:
func (_m *AccountRepositoryInterface) GetWaitingApproval() ([]*entities.Account, error) {
	ret := _m.Called()

	var r0 []*entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Account, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepositoryInterface_GetWaitingApproval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWaitingApproval'
type AccountRepositoryInterface_GetWaitingApproval_Call struct {
	*mock.Call
}

// GetWaitingApproval is a helper method to define mock.On call
func (_e *AccountRepositoryInterface_Expecter) GetWaitingApproval() *AccountRepositoryInterface_GetWaitingApproval_Call {
	return &AccountRepositoryInterface_GetWaitingApproval_Call{Call: _e.mock.On("GetWaitingApproval")}
}

func (_c *AccountRepositoryInterface_GetWaitingApproval_Call) Run(run func()) *AccountRepositoryInterface_GetWaitingApproval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AccountRepositoryInterface_GetWaitingApproval_Call) Return(_a0 []*entities.Account, _a1 error) *AccountRepositoryInterface_GetWaitingApproval_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepositoryInterface_GetWaitingApproval_Call) RunAndReturn(run func() ([]*entities.Account, error)) *AccountRepositoryInterface_GetWaitingApproval_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: id
func (_m *AccountRepositoryInterface) Read(id string) (*entities.Account, error) {
	ret := _m.Called(id)

	var r0 *entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Account); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepositoryInterface_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type AccountRepositoryInterface_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id string
func (_e *AccountRepositoryInterface_Expecter) Read(id interface{}) *AccountRepositoryInterface_Read_Call {
	return &AccountRepositoryInterface_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *AccountRepositoryInterface_Read_Call) Run(run func(id string)) *AccountRepositoryInterface_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AccountRepositoryInterface_Read_Call) Return(_a0 *entities.Account, _a1 error) *AccountRepositoryInterface_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepositoryInterface_Read_Call) RunAndReturn(run func(string) (*entities.Account, error)) *AccountRepositoryInterface_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAll provides a mock function with given fields:
func (_m *AccountRepositoryInterface) ReadAll() ([]*entities.Account, error) {
	ret := _m.Called()

	var r0 []*entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Account, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepositoryInterface_ReadAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAll'
type AccountRepositoryInterface_ReadAll_Call struct {
	*mock.Call
}

// ReadAll is a helper method to define mock.On call
func (_e *AccountRepositoryInterface_Expecter) ReadAll() *AccountRepositoryInterface_ReadAll_Call {
	return &AccountRepositoryInterface_ReadAll_Call{Call: _e.mock.On("ReadAll")}
}

func (_c *AccountRepositoryInterface_ReadAll_Call) Run(run func()) *AccountRepositoryInterface_ReadAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AccountRepositoryInterface_ReadAll_Call) Return(_a0 []*entities.Account, _a1 error) *AccountRepositoryInterface_ReadAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepositoryInterface_ReadAll_Call) RunAndReturn(run func() ([]*entities.Account, error)) *AccountRepositoryInterface_ReadAll_Call {
	_c.Call.Return(run)
	return _c
}

// SearchByUsername provides a mock function with given fields: username
func (_m *AccountRepositoryInterface) SearchByUsername(username string) (*entities.Account, error) {
	ret := _m.Called(username)

	var r0 *entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Account, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Account); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepositoryInterface_SearchByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchByUsername'
type AccountRepositoryInterface_SearchByUsername_Call struct {
	*mock.Call
}

// SearchByUsername is a helper method to define mock.On call
//   - username string
func (_e *AccountRepositoryInterface_Expecter) SearchByUsername(username interface{}) *AccountRepositoryInterface_SearchByUsername_Call {
	return &AccountRepositoryInterface_SearchByUsername_Call{Call: _e.mock.On("SearchByUsername", username)}
}

func (_c *AccountRepositoryInterface_SearchByUsername_Call) Run(run func(username string)) *AccountRepositoryInterface_SearchByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AccountRepositoryInterface_SearchByUsername_Call) Return(_a0 *entities.Account, _a1 error) *AccountRepositoryInterface_SearchByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepositoryInterface_SearchByUsername_Call) RunAndReturn(run func(string) (*entities.Account, error)) *AccountRepositoryInterface_SearchByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, account
func (_m *AccountRepositoryInterface) Update(id string, account *entities.Account) error {
	ret := _m.Called(id, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *entities.Account) error); ok {
		r0 = rf(id, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AccountRepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id string
//   - account *entities.Account
func (_e *AccountRepositoryInterface_Expecter) Update(id interface{}, account interface{}) *AccountRepositoryInterface_Update_Call {
	return &AccountRepositoryInterface_Update_Call{Call: _e.mock.On("Update", id, account)}
}

func (_c *AccountRepositoryInterface_Update_Call) Run(run func(id string, account *entities.Account)) *AccountRepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*entities.Account))
	})
	return _c
}

func (_c *AccountRepositoryInterface_Update_Call) Return(_a0 error) *AccountRepositoryInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepositoryInterface_Update_Call) RunAndReturn(run func(string, *entities.Account) error) *AccountRepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApproval provides a mock function with given fields: status, account
func (_m *AccountRepositoryInterface) UpdateApproval(status string, account *entities.Account) error {
	ret := _m.Called(status, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *entities.Account) error); ok {
		r0 = rf(status, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepositoryInterface_UpdateApproval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApproval'
type AccountRepositoryInterface_UpdateApproval_Call struct {
	*mock.Call
}

// UpdateApproval is a helper method to define mock.On call
//   - status string
//   - account *entities.Account
func (_e *AccountRepositoryInterface_Expecter) UpdateApproval(status interface{}, account interface{}) *AccountRepositoryInterface_UpdateApproval_Call {
	return &AccountRepositoryInterface_UpdateApproval_Call{Call: _e.mock.On("UpdateApproval", status, account)}
}

func (_c *AccountRepositoryInterface_UpdateApproval_Call) Run(run func(status string, account *entities.Account)) *AccountRepositoryInterface_UpdateApproval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*entities.Account))
	})
	return _c
}

func (_c *AccountRepositoryInterface_UpdateApproval_Call) Return(_a0 error) *AccountRepositoryInterface_UpdateApproval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepositoryInterface_UpdateApproval_Call) RunAndReturn(run func(string, *entities.Account) error) *AccountRepositoryInterface_UpdateApproval_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: status, account
func (_m *AccountRepositoryInterface) UpdateStatus(status string, account *entities.Account) error {
	ret := _m.Called(status, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *entities.Account) error); ok {
		r0 = rf(status, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepositoryInterface_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type AccountRepositoryInterface_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - status string
//   - account *entities.Account
func (_e *AccountRepositoryInterface_Expecter) UpdateStatus(status interface{}, account interface{}) *AccountRepositoryInterface_UpdateStatus_Call {
	return &AccountRepositoryInterface_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", status, account)}
}

func (_c *AccountRepositoryInterface_UpdateStatus_Call) Run(run func(status string, account *entities.Account)) *AccountRepositoryInterface_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*entities.Account))
	})
	return _c
}

func (_c *AccountRepositoryInterface_UpdateStatus_Call) Return(_a0 error) *AccountRepositoryInterface_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepositoryInterface_UpdateStatus_Call) RunAndReturn(run func(string, *entities.Account) error) *AccountRepositoryInterface_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAccountRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountRepositoryInterface creates a new instance of AccountRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountRepositoryInterface(t mockConstructorTestingTNewAccountRepositoryInterface) *AccountRepositoryInterface {
	mock := &AccountRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
